swagger: "2.0"
info:
  description: API for Practicing APIs
  version: 1.0.0
  title: Simpler Sunglasses Store
  contact:
    email: b@simpler.com
tags:
  - name: brands
    description: brands avaialable
  - name: products
    description: all avaialable products
  - name: login
    description: a place for user to login
  - name: me/cart
    description: after logging in user can do specific actions with their cart
schemes:
  - https
# basePath: /v2
produces:
  - application/json
securityDefinitions:
  basicAuth:
    type: basic
paths:
  /brands:
    get:
      summary: Brands
      description: |
        The Brands endpoint will return a list of brands
      tags:
        - brands
      responses:
        200:
          description: Successful response return list of brands
          schema:
            type: array
            items:
              $ref: "#/definitions/Brands"
        400:
          description: Unexpected error
          schema:
            $ref: "#/definitions/Error"
  /brands/{brandId}/products:
    get:
      summary: Return Products Based on brand id
      description: |
        This endpoint will return a list of procucts based on the id of a brand
      tags:
        - brands
      parameters:
        - in: path
          name: brandId
          description: numeric ID of a brand
          required: true
          type: string
      responses:
        200:
          description: ID matches brand Success
          schema:
            type: array
            items:
              $ref: "#/definitions/Products"
        400:
          description: bad input parameter
          schema:
            $ref: "#/definitions/Error"
        404:
          description: URL not recognized
          schema:
            $ref: "#/definitions/Error"
  /products:
    get:
      summary: All Products
      description: |
        All products in the store will be returned
      tags:
        - products
      responses:
        200:
          description: Successful response
          schema:
            $ref: "#/definitions/Products"
        400:
          description: Unexpected error
          schema:
            $ref: "#/definitions/Error"
  /login:
    post:
      summary: User Login
      description: |
        Allows user to login so that they can view and edit their cart
      tags:
        - login
      parameters:
        - in: body
          name: login
          description: The login form for username and password
          schema:
            $ref: "#/definitions/Login"
      responses:
        200:
          description: user now has access to cart
          schema:
            $ref: "#/definitions/Users"
        201:
          description: Successful response token created
          schema:
            type: array
            items:
              type: object
              properties:
                userAuth:
                  type: string
                  description: token that allows user to access their cart
        401:
          description: unauthorized user
          schema:
            $ref: "#/definitions/Error"
        400:
          description: bad request
          schema:
            $ref: "#/definitions/Error"
  /me/cart:
    get:
      summary: User can view their cart
      description: |
        After providing login user can view their cart
      tags:
        - me/cart
      security:
        - basicAuth: []
      responses:
        200:
          description: Success
          schema:
            $ref: "#/definitions/Cart"
        400:
          description: bad request
          schema:
            $ref: "#/definitions/Error"
        401:
          description: unauthorized to access store
          schema:
            $ref: "#/definitions/Error"
    post:
      summary: Add items
      description: |
        After providing login user can add items to their cart
      tags:
        - me/cart
      security:
        - basicAuth: []
      responses:
        201:
          description: item added to cart
          schema:
            $ref: "#/definitions/Cart"
        400:
          description: bad request
          schema:
            $ref: "#/definitions/Error"
        401:
          description: unauthorized to access store
          schema:
            $ref: "#/definitions/Error"
  /me/cart/{productId}:
    delete:
      summary: Delete product
      description: |
        User is able to delete selected product
      tags:
        - me/cart
      security:
        - basicAuth: []
      parameters:
        - in: path
          name: productId
          description: numeric ID of product
          required: true
          type: integer
      responses:
        204:
          description: No content to send back displaying updated cart
          schema:
            $ref: "#/definitions/Cart"
        400:
          description: bad request
          schema:
            $ref: "#/definitions/Error"
        401:
          description: unauthorized to access store
          schema:
            $ref: "#/definitions/Error"
    post:
      summary: Edit quantity
      description: |
        User is able to edit the quantity of selected product
      tags:
        - me/cart
      security:
        - basicAuth: []
      parameters:
        - in: path
          name: productId
          description: numeric ID of product
          required: true
          type: integer
      responses:
        201:
          description: item in cart successfully updated
          schema:
            $ref: "#/definitions/Cart"
        400:
          description: bad request
          schema:
            $ref: "#/definitions/Error"
        401:
          description: unauthorized to access store
          schema:
            $ref: "#/definitions/Error"
        404:
          description: not found URL not recognized
          schema:
            $ref: "#/definitions/Error"
        405:
          description: Method not allowed
          schema:
            $ref: "#/definitions/Error"

definitions:
  Brands:
    type: object
    properties:
      id:
        type: string
        description: the identifier for the brand to match up to the product
      name:
        type: string
        description: the brand name of glasses
  Products:
    type: object
    properties:
      id:
        type: string
        description: the identifier of the product in stock
      categoryId:
        type: string
        description: the identifier of the product to match up to the brand
      name:
        type: string
        description: the style of sunglasses
      description:
        type: string
        description: a verbal description of the sunglasses
      price:
        type: integer
        format: int32
        description: the price of the sunglasses
      imageUrls:
        type: array
        items:
          type: string
          description: images related to product
  Users:
    type: object
    properties:
      gender:
        type: string
        description: users gender
      cart:
        type: array
        items:
          $ref: "#/definitions/Cart"
      name:
        type: object
        properties:
          title:
            type: string
            description: Users title
          first:
            type: string
            description: users first name
          last:
            type: string
            description: users last name
      location:
        type: object
        properties:
          street:
            type: string
            description: users street address
          city:
            type: string
            description: users city
          state:
            type: string
            description: users state
          postcode:
            type: integer
            format: int32
            description: users zip code
      email:
        type: string
        description: users email
      login:
        type: object
        properties:
          username:
            type: string
            description: username
          password:
            type: string
            description: password
          salt:
            type: string
            description: salt key
          md5:
            type: string
            description: md5
          sha1:
            type: string
            description: sha1
          sha256:
            type: string
            description: sha256
      dob:
        type: string
        description: users birthday
      registered:
        type: string
        description: users registration date
      phone:
        type: string
        description: users phone number
      cell:
        type: string
        description: users cellular
      picture:
        type: object
        properties:
          large:
            type: string
            description: larger imageURL of user
          medium:
            type: string
            description: med imageURL of user
          thumbnail:
            type: string
            description: thumbnail imageURL of user
      nat:
        type: string
        description: users nationality
  Login:
    type: object
    properties:
      username:
        type: string
        description: the username for login
      password:
        type: string
        description: the password for login
  Cart:
    type: object
    properties:
      id:
        type: string
        description: the identifier of the product
      name:
        type: string
        description: the name of the brand
      price:
        type: integer
        format: int32
        description: price of item
      totalPrice:
        type: integer
        format: int32
        description: total price of all items
  Error:
    type: object
    properties:
      code:
        type: integer
        format: int32
      message:
        type: string
# Added by API Auto Mocking Plugin
host: virtserver.swaggerhub.com
# Added by API Auto Mocking Plugin
