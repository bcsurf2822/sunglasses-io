swagger: "2.0"
info:
  description: API for Practicing APIs
  version: 1.0.0
  title: Simpler Sunglasses Store
  contact:
    email: b@simpler.com
tags:
  - name: brands
    description: brands avaialable
  - name: products
    description: all avaialable products
  - name: login
    description: a place for user to login
  - name: me/cart
    description: after logging in user can do specific actions with their cart
schemes:
  - https
# basePath: /v2
produces:
  - application/json
securityDefinitions:
  basicAuth:
    type: basic
paths:
  /brands:
    get:
      summary: Brands
      description: |
        The Brands endpoint will return a list of brands
      tags:
        - brands
      responses:
        "200":
          description: Successful response
          schema:
            type: array
            items:
              type: object
              properties:
                id:
                  type: string
                  description: id associated with brand
                name:
                  type: string
                  description: name of brand
        "400":
          description: Unexpected error
          schema:
            type: object
            properties:
              message:
                type: string
  /brands/{brandId}/products:
    get:
      summary: Return Products Based on brand id
      description: |
        This endpoint will return a list of procucts based on the id of a brand
      tags:
        - brands
      parameters:
        - in: path
          name: brandId
          description: numeric ID of a brand
          required: true
          type: string
      responses:
        200:
          description: ID matches brand Success
          schema:
            type: array
            items:
              type: object
              properties:
                id:
                  type: string
                  description: the id of the product in stock
                brandId:
                  type: string
                  description: unique id to match with brand
                description:
                  type: string
                  description: a brief description of the product
                price:
                  type: integer
                  format: int32
                  description: the price of product
                imageUrl:
                  type: string
                  description: image of product
        400:
          description: bad input parameter
        404:
          description: URL not recognized
  /products:
    get:
      summary: All Products
      description: |
        All products in the store will be returned
      tags:
        - products
      responses:
        200:
          description: Successful response
          schema:
            type: array
            items:
              type: object
              properties:
                id:
                  type: string
                  description: the id of the product in stock
                brandId:
                  type: string
                  description: unique id to match with brand
                brandName:
                  type: string
                  description: the name of the brand
                description:
                  type: string
                  description: a brief description of the product
                price:
                  type: integer
                  format: int32
                  description: the price of product
                imageUrl:
                  type: string
                  description: image of product
        400:
          description: Unexpected error
          schema:
            type: object
            properties:
              message:
                type: string
  /login:
    post:
      summary: User Login
      description: |
        Allows user to login so that they can view and edit their cart
      tags:
        - login
      parameters:
        - name: username
          in: header
          type: string
          required: true
        - name: password
          in: header
          description: password for login
          type: string
          required: true
      responses:
        201:
          description: Successful response token created
          schema:
            type: array
            items:
              type: object
              properties:
                userId:
                  type: string
                  description: id of user logged in to grant access
                userAuth:
                  type: string
                  description: token that allows user to access their cart
        401:
          description: unauthorized user
        400:
          description: bad request
  /me/cart:
    get:
      summary: User can view their cart
      description: |
        After providing login user can view their cart
      tags:
        - me/cart
      security:
        - basicAuth: []
      responses:
        200:
          description: Success
          schema:
            type: array
            items:
              type: object
              properties:
                id:
                  type: string
                  description: the id of the product in stock
                brandName:
                  type: string
                  description: brand name of the sunglasses
                quantity:
                  type: integer
                  format: int32
                  description: the quantity of the item in cart
                price:
                  type: integer
                  format: int32
                  description: the price of product
                totalPrice:
                  type: integer
                  format: int32
                  description: total price of the order
        400:
          description: bad request
        401:
          description: unauthorized to access store
    post:
      summary: Add items
      description: |
        After providing login user can add items to their cart
      tags:
        - me/cart
      security:
        - basicAuth: []
      responses:
        201:
          description: item added to cart
          schema:
            type: array
            items:
              type: object
              properties:
                id:
                  type: string
                  description: the id of the product in stock
                brandName:
                  type: string
                  description: brand name of the sunglasses
                quantity:
                  type: integer
                  format: int32
                  description: the quantity of the item in cart
                price:
                  type: integer
                  format: int32
                  description: the price of product
                totalPrice:
                  type: integer
                  format: int32
                  description: total price of the order
        400:
          description: bad request
        401:
          description: unauthorized to access store
  /me/cart/{productId}:
    delete:
      summary: Delete product
      description: |
        User is able to delete selected product
      tags:
        - me/cart
      security:
        - basicAuth: []
      parameters:
        - in: path
          name: productId
          description: numeric ID of product
          required: true
          type: integer
      responses:
        200:
          description: item in cart successfully delete
          schema:
            type: array
            items:
              type: object
              properties:
                id:
                  type: string
                  description: the id of the product in stock
                brandName:
                  type: string
                  description: brand name of the sunglasses
                quantity:
                  type: integer
                  format: int32
                  description: the updated quantity of the item in cart
                price:
                  type: integer
                  format: int32
                  description: the price of product
                totalPrice:
                  type: integer
                  format: int32
                  description: total price of the order
        400:
          description: bad request
        401:
          description: unauthorized to access store

    post:
      summary: Edit quantity
      description: |
        User is able to edit the quantity of selected product
      tags:
        - me/cart
      security:
        - basicAuth: []
      parameters:
        - in: path
          name: productId
          description: numeric ID of product
          required: true
          type: integer
      responses:
        201:
          description: item in cart successfully updated
          schema:
            type: array
            items:
              type: object
              properties:
                id:
                  type: string
                  description: the id of the product in stock
                brandName:
                  type: string
                  description: brand name of the sunglasses
                quantity:
                  type: integer
                  format: int32
                  description: the updated quantity of the item in cart
                price:
                  type: integer
                  format: int32
                  description: the price of product
                totalPrice:
                  type: integer
                  format: int32
                  description: total price of the order
        400:
          description: bad request
        401:
          description: unauthorized to access store
        404:
          description: not found URL not recognized
        405:
          description: Method not allowed

definitions:
  InventoryItem:
    type: object
    required:
      - id
      - name
      - manufacturer
      - releaseDate
    properties:
      id:
        type: string
        format: uuid
        example: d290f1ee-6c54-4b01-90e6-d701748f0851
      name:
        type: string
        example: Widget Adapter
      releaseDate:
        type: string
        format: date-time
        example: "2016-08-29T09:12:33.001Z"
      manufacturer:
        $ref: "#/definitions/Manufacturer"
  Manufacturer:
    required:
      - name
    properties:
      name:
        type: string
        example: ACME Corporation
      homePage:
        type: string
        format: url
        example: https://www.acme-corp.com
      phone:
        type: string
        example: 408-867-5309
# Added by API Auto Mocking Plugin
host: virtserver.swaggerhub.com
# Added by API Auto Mocking Plugin
basePath: /BENCORBETT44/SimpleSunglassees/1.0.0
